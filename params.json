{"name":"Boffin","body":"Boffin\r\n======\r\n\r\nHit tracking library for Ruby using [Redis](http://redis.io)\r\n\r\nAbout\r\n-----\r\n\r\nBoffin is a library for tracking hits to things in your Ruby application. Things\r\ncan be IDs of records in a database, strings representing tags or topics, URLs\r\nof webpages, names of places, whatever you desire. Boffin is able to provide\r\nlists of those things based on most hits, least hits, it can even report on\r\nweighted combinations of different types of hits.\r\n\r\nResources\r\n---------\r\n\r\n * [Documentation](http://rubydoc.info/github/heycarsten/boffin/master/frames)\r\n * [Source Code](https://github.com/heycarsten/boffin)\r\n * [Issue Tracker](https://github.com/heycarsten/boffin/issues)\r\n * [Test Suite](https://github.com/heycarsten/boffin/tree/master/spec)\r\n * [License](https://github.com/heycarsten/boffin/blob/master/LICENSE)\r\n\r\nGetting started\r\n---------------\r\n\r\nYou need a functioning [Redis](http://redis.io) installation. Once Redis is\r\ninstalled you can start it by running `redis-server`, this will run Redis in the\r\nforeground.\r\n\r\nYou can use Boffin in many different contexts, but the most common one is\r\nprobably that of a Rails or Sinatra application. Just add `boffin` to your\r\n[Gemfile](http://gembundler.com):\r\n\r\n```ruby\r\ngem 'boffin'\r\n```\r\n\r\nFor utmost performance on *nix-based systems, require\r\n[hiredis](https://github.com/pietern/hiredis-rb) before you require Boffin:\r\n\r\n```ruby\r\ngem 'hiredis'\r\ngem 'boffin'\r\n```\r\n\r\nConfiguration\r\n-------------\r\n\r\nMost of Boffin's default configuration options are quite reasonable, but they\r\nare easy to change if required:\r\n\r\n```ruby\r\nBoffin.config do |c|\r\n  c.redis              = MyApp.redis             # Redis.connect by default\r\n  c.namespace          = \"tracking:#{MyApp.env}\" # Redis key namespace\r\n  c.hours_window_secs  = 3.days     # Time to maintain hourly interval data\r\n  c.days_window_secs   = 3.months   # Time to maintain daily interval data\r\n  c.months_window_secs = 3.years    # Time to maintain monthly interval data\r\n  c.cache_expire_secs  = 15.minutes # Time to cache Tracker#top result sets\r\nend\r\n```\r\n\r\nTracking\r\n--------\r\n\r\nA Tracker is responsible for maintaining a namespace for hits. For our examples\r\nwe will have a model called `Listing` it represents a listing in our realty\r\nweb app. We want to track when someone likes, shares, or views a listing.\r\n\r\nOur example web app uses [Sinatra](http://sinatrarb.com) as its framework, and\r\n[Sequel](http://sequel.rubyforge.org)::Model as its ORM. It's important to note\r\nthat Boffin has no requirements on any of these things, it can be used to track\r\nany Ruby class in any environment.\r\n\r\nStart by telling Boffin to make the Listing model trackable:\r\n\r\n```ruby\r\nBoffin.track(Listing)\r\n```\r\n\r\n**_or_**\r\n\r\n```ruby\r\nclass Listing < Sequel::Model\r\n  include Boffin::Trackable\r\nend\r\n```\r\n\r\nYou can optionally specify the types of hits that are acceptable, this is good\r\npractice and will save frustrating moments where you accidentally type `:view`\r\ninstead of `:views`, to do that:\r\n\r\n```ruby\r\nBoffin.track(Listing, [:likes, :shares, :views])\r\n```\r\n\r\n**_or_**\r\n\r\n```ruby\r\nclass Listing < Sequel::Model\r\n  include Boffin::Trackable\r\n  boffin.hit_types = [:likes, :shares, :views]\r\nend\r\n```\r\n\r\n**_or_**\r\n\r\n```ruby\r\nclass Listing < Sequel::Model\r\n  Boffin.track(self, [:likes, :shares, :views])\r\nend\r\n```\r\n\r\nNow to track hits on instances of the Listing model, simply:\r\n\r\n```ruby\r\nget '/listings/:id' do\r\n  @listing = Listing[params[:id]]\r\n  @listing.hit(:views)\r\n  haml :'listings/show'\r\nend\r\n```\r\n\r\nHowever you will probably want to provide Boffin with some uniqueness to\r\nidentify hits from particular users or sessions:\r\n\r\n```ruby\r\nget '/listings/:id' do\r\n  @listing = Listing[params[:id]]\r\n  @listing.hit(:views, unique: [current_user, session[:id]])\r\n  haml :'listings/show'\r\nend\r\n```\r\n\r\nBoffin now adds uniqueness to the hit in the form of `current_user.id` if\r\navailable. If `current_user` is nil, Boffin then uses `session[:id]`. You can\r\nprovide as many uniquenesses as you'd like, the first one that is not blank\r\n(`nil`, `false`, `[]`, `{}`, or `''`) will be used.\r\n\r\nIt could get a bit tedious having to add `[current_user, session[:id]]` whenever\r\nwe want to hit an instance, so let's create a helper:\r\n\r\n```ruby\r\nhelpers do\r\n  def hit(trackable, type)\r\n    trackable.hit(type, unique: [current_user, session[:id]])\r\n  end\r\nend\r\n```\r\n\r\nFor these examples we are in the context of a Sinatra application, but this is\r\napplicable to a Rails application as well:\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  protected\r\n  def hit(trackable, type)\r\n    trackable.hit(type, unique: [current_user, session[:session_id]])\r\n  end\r\nend\r\n```\r\n\r\nYou get the idea, now storing a hit is as easy as:\r\n\r\n```ruby\r\nget '/listings/:id' do\r\n  @listing = Listing[params[:id]]\r\n  hit @listing, :views\r\n  haml :'listings/show'\r\nend\r\n```\r\n\r\nReporting\r\n---------\r\n\r\nAfter some hits have been tracked, you can start to do some queries:\r\n\r\n**Get a count of all views for an instance**\r\n\r\n```ruby\r\n@listing.hit_count(:views)\r\n```\r\n\r\n**Get count of unique views for an instance**\r\n\r\n```ruby\r\n@listing.uhit_count(:views)\r\n```\r\n\r\n**Get IDs of the most viewed listings in the past 5 days**\r\n\r\n```ruby\r\nListing.top_ids(:views, days: 5)\r\n```\r\n\r\n**Get IDs of the least viewed listings (that were viewed) in the past 8 hours**\r\n\r\n```ruby\r\nListing.top_ids(:views, hours: 8, order: 'asc')\r\n```\r\n\r\n**Get IDs and hit counts of the most liked listings in the past 5 days**\r\n\r\n```ruby\r\nListing.top_ids(:likes, days: 5, counts: true)\r\n```\r\n\r\n**Get IDs of the most liked, viewed, and shared listings with likes weighted\r\nhigher than views in the past 12 hours**\r\n\r\n```ruby\r\nListing.top_ids({ likes: 2, views: 1, shares: 3 }, hours: 12)\r\n```\r\n\r\n**Get IDs and combined/weighted scores of the most liked, and viewed listings in\r\nthe past 7 days**\r\n\r\n```ruby\r\nListing.top_ids({ likes: 2, views: 1 }, hours: 12, counts: true)\r\n```\r\n\r\nBoffin records hits in time intervals: hours, days, and months. Each interval\r\nhas a window of time that it is available before it expires; these windows are\r\nconfigurable. It's also important to note that the results returned by these\r\nmethods are cached for the duration of `Boffin.config.cache_expire_secs`. See\r\n**Configuration** above.\r\n\r\nMore\r\n====\r\n\r\nNot just for models\r\n-------------------\r\n\r\nAs stated before, you can use Boffin to track anything. Maybe you'd like to\r\ntrack your friends' favourite and least favourite colours:\r\n\r\n```ruby\r\n@tracker = Boffin::Tracker.new(:colours, [:faves, :unfaves])\r\n\r\n@tracker.hit(:faves,   'red',    unique: ['lena'])\r\n@tracker.hit(:unfaves, 'blue',   unique: ['lena'])\r\n@tracker.hit(:faves,   'green',  unique: ['soren'])\r\n@tracker.hit(:unfaves, 'red',    unique: ['soren'])\r\n@tracker.hit(:faves,   'green',  unique: ['jens'])\r\n@tracker.hit(:unfaves, 'yellow', unique: ['jens'])\r\n\r\n@tracker.top(:faves, days: 1)\r\n```\r\n\r\nOr, perhaps you'd like to clone Twitter? Using Boffin, all the work is\r\nessentially done for you*:\r\n\r\n```ruby\r\nWordsTracker = Boffin::Tracker.new(:words, [:searches, :tweets])\r\n\r\nget '/search' do\r\n  @tweets = Tweet.search(params[:q])\r\n  params[:q].split.each { |word| WordsTracker.hit(:searches, word) }\r\n  haml :'search/show'\r\nend\r\n\r\npost '/tweets' do\r\n  @tweet = Tweet.create(params[:tweet])\r\n  if @tweet.valid?\r\n    @tweet.words.each { |word| WordsTracker.hit(:tweets, word) }\r\n    redirect to(\"/tweets/#{@tweet.id}\")\r\n  else\r\n    haml :'tweets/form'\r\n  end\r\nend\r\n\r\nget '/trends' do\r\n  @words = WordsTracker.top({ tweets: 3, searches: 1 }, hours: 5)\r\n  haml :'trends/index'\r\nend\r\n```\r\n_*This is a joke._\r\n\r\n\r\nCustom increments\r\n-----------------\r\n\r\nFor some applications you might want to track something beyond simple hits.\r\nTo accomodate this you can specify a custom increment to any hit you record.\r\nFor example, if you run an ecommerce site it might be nice to know which\r\nproducts are your bestsellers:\r\n\r\n```ruby\r\nclass Product < ActiveRecord::Base\r\n  Boffin.track(self, [:sales])\r\nend\r\n\r\nclass Order < ActiveRecord::Base\r\n  after_create :track_sales\r\n\r\n  private\r\n\r\n  def track_sales\r\n    line_items.each do |line_item|\r\n      product = line_item.product\r\n      amount  = product.amount.cents * line_item.quantity\r\n      product.hit :sales, increment: amount\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThen, when you want to check on your sales over the last day:\r\n\r\n```ruby\r\nProduct.top_ids(:sales, hours: 24, counts: true)\r\n```\r\n\r\nThe Future&trade;\r\n-----------------\r\n\r\n * Ability to hit multiple instances in one command\r\n * Ability to get hit-count range for an instance\r\n * Some nice examples with pretty things\r\n * Maybe ORM adapters for niceness and tighter integration\r\n * Examples of how to turn IDs back into instances\r\n * Reporting DSL thingy\r\n * Web framework integration (helpers for tracking hits, console type ditty.)\r\n * Ability to union on unique hits and raw hits\r\n\r\nFAQ\r\n---\r\n\r\n### What's with the name?\r\n\r\nWell, it means [this](http://en.wikipedia.org/wiki/Boffin). For the purposes of\r\nthis project, its use is very tongue-in-cheek.\r\n\r\n### Are you British?\r\n\r\nNo, I'm just weird, but [this guy](http://github.com/aanand) is a real British person.\r\n","tagline":"Hit tracking library for Ruby using Redis","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}